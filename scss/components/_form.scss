@use "sass:list";
@use "../abstract/" as *;

// 폼요소 공통디자인 정의
$formSettings: (
  // "key":value,
  "height": rem(40),
  "border": rem(1) solid gray,
  "borderRadius": rem(4),
  "bgColor": gray,
  "paddingInline": rem(12),
  "fontColor": gray,
  "fontSize": rem(14),
  "lineHeight": 1,
  "letterSpacing": rem(-0.5),
  "placehodlerColor": gray,
  "disabledBgColor": rgba(gray, 0.1),
  "readonlyBgColor": rgba(gray, 0.05)
);
// Select디자인 정의
$selectSetting: (
  "bgUrl": "bg_select.svg",
  "iconPosition": rem(12),
  "bgWidth": 6,
  "paddingInline": 12,
);
// 라디오 & 체크박스 디자인 정의
$radioCheckSetting: (
  1: (
    "className": ".radio-type1",
    "offImage": "ico_radio_off.svg",
    "onImage": "ico_radio_on.svg",
    "width": rem(24),
    "height": rem(24),
  ),
  2: (
    "className": ".check-type1",
    "offImage": "ico_check_off.svg",
    "onImage": "ico_check_on.svg",
    "width": rem(24),
    "height": rem(24),
  ),
);

%form {
  height: map-get($formSettings, height);
  border: map-get($formSettings, border);
  box-sizing: border-box;
  border-radius: map-get($formSettings, borderRadius);
  background-color: map-get($formSettings, bgColor);
  padding-inline: map-get($formSettings, paddingInline);
  color: map-get($formSettings, fontColor);
  font-size: map-get($formSettings, fontSize);
  line-height: map-get($formSettings, lineHeight);
  letter-spacing: map-get($formSettings, letterSpacing);
  &::placeholder {
    color: map-get($formSettings, placehodlerColor);
  }
  &:disabled {
    background: map-get($formSettings, disabledBgColor);
  }
  &[readonly] {
    background: map-get($formSettings, readonlyBgColor);
  }
}

%label {
  display: inline-flex;
  gap: rem(4);
  align-items: center;
  color: gray;
  font-size: rem(12);
  line-height: 1;
  letter-spacing: rem(-0.5);
}

.tel {
  display: flex;
  gap: rem(8);
  > * {
    flex: 1;
  }
}
.radio-group {
  display: flex;
  flex-wrap: wrap;
  gap: rem(4) rem(10);
  font-size: 0;
}
.address {
  display: grid;
  grid-template-columns: 1fr rem(79);
  gap: rem(4) rem(9);
  [type="text"] {
    grid-column: 1/-1;
  }
  .btn {
    font-size: rem(12);
    font-weight: 700;
    line-height: 100%;
    letter-spacing: rem(-1);
    padding-inline: 0;
  }
}

.input {
  @extend %form;
  width: var(--w, 100%);
}

.select {
  $result: map-get($selectSetting, paddingInline) * 2 + map-get($selectSetting, bgWidth);

  @extend %form;
  @include background(map-get($selectSetting, bgUrl), right map-get($selectSetting, iconPosition) center);
  padding-right: rem($result);
  appearance: none;
  width: var(--w, 100%);
}
.select-group {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: rem(4);
}

.textarea {
  @extend %form;
  width: 100%;
  height: rem(var(--height, 10));
  padding-block: rem(15);
  &::placeholder {
    color: gray;
    font-family: "Noto Sans KR";
    font-size: rem(12);
    line-height: rem(12);
    letter-spacing: rem(-0.5);
  }
}

@mixin Radio($mapName, $index) {
  #{map-get($mapName, $index, className)} {
    @include a11y-hidden;
    + label {
      @extend %label;

      &::before {
        @include background(map-get($mapName, $index, offImage));
        content: "";
        width: map-get($mapName, $index, width);
        height: map-get($mapName, $index, height);
      }
    }
    &:checked {
      + label {
        &::before {
          @include background(map-get($mapName, $index, onImage));
        }
      }
    }
  }
}

@for $idx from 1 through list.length($radioCheckSetting) {
  @include Radio($radioCheckSetting, $idx);
}
